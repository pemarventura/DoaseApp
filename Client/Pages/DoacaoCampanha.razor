@page "/doacao-campanha"
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@using DoaseApp.Shared.Classes
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.WebUtilities
@using static Microsoft.AspNetCore.WebUtilities.QueryHelpers
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.0/css/bootstrap.min.css" integrity="sha384-Koiv2BdOqjJbqBdXrx2Z6Pm6TE1z6tjfmK0Ey9ixFx2FuPfEmO4UL9CDWJ+0jJKC" crossorigin="anonymous">

@if (!mostrarRevisao)
{
    <h1 style="text-align:center;">Realizar Doacão</h1>
    <p></p>
    <h1 style="text-align:center;"> @campanhaNome</h1>

    <div style="background-color: white;">
        <div class="row">
            <div class="col-4 col-md-3 border">
                <p>Item:</p>
            </div>
            <div class="col-4 col-md-4 border">
                <p>Quantidade Pedida:</p>
            </div>
            <div class="col-4 col-md-5 border">
                <p>Quantidade a doar:</p>
            </div>
        </div>

        @if (Campanha != null && Campanha.DoacoesRequisitadas != null)
        {
            @foreach (var doacao in Campanha.DoacoesRequisitadas)
            {
                <div class="row">
                    <div class="col-4 col-md-3 border">
                        <p>@doacao.Item?.NomeItem</p>
                    </div>
                    <div class="col-4 col-md-4 border">
                        <div class="progress">
                            @if (doacao.QuantidadePedida > 0)
                            {
                                var percentage = (doacao.QuantidadeArrecadada * 100) / doacao.QuantidadePedida;
                                <div class="progress-bar" role="progressbar" style="width: @percentage.ToString("0")%"></div>
                                <span class="progress-bar-text">@percentage.ToString("0")%</span>
                            }
                            else
                            {
                                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                <span class="progress-bar-text">0%</span>
                            }
                        </div>
                        <div class="text-center">
                            <p>@doacao.QuantidadeArrecadada / @doacao.QuantidadePedida</p>
                        </div>
                    </div>
                    <div class="col-4 col-md-5 border">
                        <input type="number" class="form-control" @bind="@doacao.QuantidadeArrecadada" />
                    </div>
                </div>
            }
        }

        <div class="mt-4 text-center">
            <button type="submit" class="btn btn-info btn-lg w-100 text-light" style="margin-top: 10px;" @onclick="ShowRevisao">Do@r!</button>
        </div>
    </div>


}

else
{
    <div class="d-flex justify-content-center">
        <div class="card bg-light p-5">
            <div class="card-body d-flex flex-column align-items-center">
                <p>Revise as informações antes de prosseguir!</p>

                @if (Campanha != null && Campanha.DoacoesRequisitadas != null)
                {
                    @foreach (var doacao in Campanha.DoacoesRequisitadas)
                    {
                        <div class="d-flex justify-content-between my-2">
                            <p>@doacao.Item?.NomeItem : @doacao.QuantidadeArrecadada</p>
                        </div>
                    }
                }

                <div class="d-flex justify-content-between mb-8">
                    <button type="button" class="btn btn-warning mx-2" @onclick="Voltar">Voltar</button>
                    <button type="button" class="btn btn-primary mx-2" @onclick="UpdateCampanha">Finalizar</button>
                </div>
            </div>
        </div>
    </div>

}


@code {

    [Parameter] public string Email { get; set; }
    public Person User { get; set; }
    public Campanha Campanha { get; set; }
    public string campanhaNome { get; set; }
    private bool mostrarRevisao { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        Email = queryParameters["email"];

        await GetCampanhaByUser(Email);
    }

    private async Task GetCampanhaByUser(string email)
    {
        this.Campanha = await httpClient.GetFromJsonAsync<Campanha>($"api/campanha/CampanhaByUser?email={email}");
        campanhaNome = this.Campanha.NomeCampanha;
    }

    private void ShowRevisao()
    {
        this.mostrarRevisao = true;
    }

    private void Voltar()
    {
        this.mostrarRevisao = false;
    }

    private async Task UpdateCampanha()
    {
        await httpClient.PostAsJsonAsync("api/campanha/UpdateCampanha", Campanha);

        mostrarRevisao = false;
        OnInitializedAsync();
    }
}
